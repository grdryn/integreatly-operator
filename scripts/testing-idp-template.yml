apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: integreatly-deploy
objects:
  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakRealm
    metadata:
      name: ${REALM}
      namespace: ${NAMESPACE}
      labels:
        sso: ${REALM}
    spec:
      instanceSelector:
        matchLabels:
          sso: integreatly
      realm:
        displayName: Testing IDP
        enabled: true
        id: ${REALM}
        realm: ${REALM}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakClient
    metadata:
      name: ${REALM}-client
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      client:
        id: openshift
        clientId: openshift
        rootUrl: ${OAUTH_URL}
        secret: ${CLIENT_SECRET}
        redirectUris:
          - ${OAUTH_URL}/oauth2callback/${REALM}
        directAccessGrantsEnabled: true
        enabled: true
        clientAuthenticatorType: client-secret
        fullScopeAllowed: true
        access:
          configure: true
          manage: true
          view: true
        standardFlowEnabled: true
        webOrigins:
          - ${OAUTH_URL}
          - ${OAUTH_URL}/*
        protocolMappers:
          - config:
              access.token.claim: 'true'
              claim.name: given_name
              id.token.claim: 'true'
              jsonType.label: String
              user.attribute: firstName
              userinfo.token.claim: 'true'
            consentRequired: true
            consentText: '${givenName}'
            name: given name
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: 'true'
              id.token.claim: 'true'
              userinfo.token.claim: 'true'
            consentRequired: true
            consentText: '${fullName}'
            name: full name
            protocol: openid-connect
            protocolMapper: oidc-full-name-mapper
          - config:
              access.token.claim: 'true'
              claim.name: family_name
              id.token.claim: 'true'
              jsonType.label: String
              user.attribute: lastName
              userinfo.token.claim: 'true'
            consentRequired: true
            consentText: '${familyName}'
            name: family name
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              attribute.name: Role
              attribute.nameformat: Basic
              single: 'false'
            consentText: '${familyName}'
            name: role list
            protocol: saml
            protocolMapper: saml-role-list-mapper
          - config:
              access.token.claim: 'true'
              claim.name: email
              id.token.claim: 'true'
              jsonType.label: String
              user.attribute: email
              userinfo.token.claim: 'true'
            consentRequired: true
            consentText: '${email}'
            name: email
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: 'true'
              claim.name: preferred_username
              id.token.claim: 'true'
              jsonType.label: String
              user.attribute: username
              userinfo.token.claim: 'true'
            consentText: n.a.
            name: username
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-customer-admin01
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: customer-admin01@example.com
        emailVerified: true
        enabled: true
        firstName: "Customer"
        lastName: "Admin 01"
        username: customer-admin01
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-customer-admin02
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: customer-admin02@example.com
        emailVerified: true
        enabled: true
        firstName: "Customer"
        lastName: "Admin 02"
        username: customer-admin02
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-customer-admin03
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: customer-admin03@example.com
        emailVerified: true
        enabled: true
        firstName: "Customer"
        lastName: "Admin 03"
        username: customer-admin03
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user01
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user01@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 01"
        username: test-user01
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user02
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user02@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 02"
        username: test-user02
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user03
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user03@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 03"
        username: test-user03
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user04
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user04@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 04"
        username: test-user04
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user05
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user05@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 05"
        username: test-user05
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user06
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user06@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 06"
        username: test-user06
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user07
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user07@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 07"
        username: test-user07
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user08
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user08@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 08"
        username: test-user08
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user09
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user09@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 09"
        username: test-user09
        credentials:
          - type: "password"
            value: ${PASSWORD}

  - apiVersion: keycloak.org/v1alpha1
    kind: KeycloakUser
    metadata:
      name: ${REALM}-test-user10
      namespace: ${NAMESPACE}
    spec:
      realmSelector:
        matchLabels:
          sso: ${REALM}
      user:
        clientRoles:
          account:
            - manage-account
            - view-profile
          broker:
            - read-token
        email: test-user10@example.com
        emailVerified: true
        enabled: true
        firstName: "Test"
        lastName: "User 10"
        username: test-user10
        credentials:
          - type: "password"
            value: ${PASSWORD}

parameters:
  - description: URL of OpenShift OAuth server, with leading protocol and without trailing slash
    name: OAUTH_URL
    required: true
  - description: The namespace to deploy into
    name: NAMESPACE
    value: redhat-rhmi-rhsso
  - description: Realm name
    name: REALM
    value: testing-idp
  - description: Password used for testing users
    name: PASSWORD
    generate: expression
    from: "[a-zA-Z0-9]{8}"
  - description: IDP client client
    name: CLIENT_SECRET
    generate: expression
    from: "[a-zA-Z0-9]{12}"
